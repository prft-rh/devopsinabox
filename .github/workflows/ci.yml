name: DevOpsInABox

on:
#  push:
#    branches:
#    - aws
#    - azure
  workflow_dispatch:
    inputs:
      increment_devops_version:
        type: choice
        description: Version increment for devopsinabox
        required: true
        default: 'patch'
        options:
        - major
        - minor
        - patch
      increment_catalog_version:
        type: choice
        description: Version increment for catalog
        required: true
        default: 'patch'
        options:
        - major
        - minor
        - patch
      pull_branch:
        type: choice
        description: Branch to deploy
        required: true
        default: 'aws'
        options:
        - aws
        - azure
      override_version:
        description: Manual override on a version for devopsinabox.  Input examples - 0.0.32, 0.5.21, 1.32.11
        required: false

jobs:
  build_devopsinabox:

    name: Build and Deploy DevOpsInABox
    runs-on: ubuntu-latest
    timeout-minutes: 4
    steps:

      - name: Checkout main
        uses: actions/checkout@v3
        with:
          path: main

      - name: Confirm and set inputs
        run: |
          echo "::notice::INCREMENT_DEVOPS_VERSION = ${{ inputs.increment_devops_version }}"
          echo "::notice::INCREMENT_CATALOG_VERSION = ${{ inputs.increment_catalog_version }}"
          echo "::notice::BRANCH = ${{ inputs.pull_branch }}"
          echo "::notice::OVERRIDE_VERSION = ${{ inputs.override_version }}"

          if [ ${GITHUB_REF#refs/heads/} == "main" ]; then
            echo "BRANCH=$(echo ${{ inputs.pull_branch }})" >> $GITHUB_ENV
          elif [ ${GITHUB_REF#refs/heads/} == "aws" ] || [ ${GITHUB_REF#refs/heads/} == "azure" ]; then
            echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
          else
            echo "::error::Branch is not set to 'aws' or 'azure'"
            echo "::error::github_ref = ${GITHUB_REF#refs/heads/}"
            exit 1
          fi

          if [ -z "${{ inputs.increment_devops_version }}" ]; then
            echo "INCREMENT_DEVOPS_VERSION=patch" >> $GITHUB_ENV
          else
            echo "INCREMENT_DEVOPS_VERSION=$(echo ${{ inputs.increment_devops_version }})" >> $GITHUB_ENV
          fi

          if [ -z "${{ inputs.increment_catalog_version }}" ]; then
            echo "INCREMENT_CATALOG_VERSION=patch" >> $GITHUB_ENV
          else
            echo "INCREMENT_CATALOG_VERSION=$(echo ${{ inputs.increment_catalog_version }})" >> $GITHUB_ENV
          fi

          if [ -z "${{ inputs.override_version }}" ]; then
            echo "OVERRIDE_VERSION=false" >> $GITHUB_ENV
          else
            VERSION=$(main/tools/check_version.sh ${{ inputs.override_version }})
            if [ $VERSION == "error" ]; then
              echo "::error::Version must be in the format X.X.X.  Examples: 0.0.32, 0.5.2, 1.2.45"
              exit -1
            fi
            echo "OVERRIDE_VERSION=$(echo $VERSION)" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          path: branch
          ref: ${{ env.BRANCH }}

      - name: Check Quay connection
        run: |
          STATUS=$(curl --location --request GET 'https://quay.io/api/v1/repository/'"$ORGANIZATION"'/devopsinabox-operator/tag?limit=1' --header 'Authorization: Bearer $TOKEN' -s -o /dev/null -w '%{http_code}')
          if [ "$STATUS" -ge "400" ]; then
            echo "::error::Cannot connect to Quay API.  Status code is $STATUS"
            exit 1
          fi
        shell: bash
        env:
          TOKEN: ${{ secrets.QUAY_API_TOKEN }}
          ORGANIZATION: ${{ secrets.QUAY_ORGANIZATION }}

      - name: Set versions
        run: |
          TAG_DATA=$(curl --location --request GET 'https://quay.io/api/v1/repository/'"$ORGANIZATION"'/devopsinabox-operator/tag?limit=100&onlyActiveTags=true' --header 'Authorization: Bearer $TOKEN')
          TAG_ARRAY=$(echo $TAG_DATA | jq .tags)
          SPECIFIC_DATA=$(curl --location --request GET 'https://quay.io/api/v1/repository/'"$ORGANIZATION"'/devopsinabox-operator/tag?limit=100&onlyActiveTags=true&specificTag=v0.0.1-'"$BRANCH"'' --header 'Authorization: Bearer $TOKEN')
          SPECIFIC_ARRAY=$(echo $SPECIFIC_DATA | jq .tags)

          if [ "$TAG_ARRAY" = "[]" ] || [ "$SPECIFIC_ARRAY" = "[]" ]; then
            echo "FIRST_RUN=true" >> $GITHUB_ENV
            TAG_VERSION="v0.0.0-$BRANCH"
            echo "OLD_VERSION=$(echo $TAG_VERSION)" >> $GITHUB_ENV
          else
            echo "FIRST_RUN=false" >> $GITHUB_ENV
            echo "$TAG_ARRAY" | jq -r '.[].name' | while read -r TAG_NAME; do
              if [[ $TAG_NAME == *-$BRANCH ]]; then
                echo "OLD_VERSION=$(echo $TAG_NAME)" >> $GITHUB_ENV
                break
              fi
            done
          fi
          
          TAG_DATA=$(curl --location --request GET 'https://quay.io/api/v1/repository/'"$ORGANIZATION"'/operators-catalog/tag?limit=1&onlyActiveTags=true' --header 'Authorization: Bearer $TOKEN')
          TAG_ARRAY=$(echo $TAG_DATA | jq .tags)

          if [ "$TAG_ARRAY" = "[]" ]; then
            TAG_VERSION="v0.0.0"
            FIRST_CATALOG_RUN=true
          elif [ $TAG_VERSION == "latest" ]; then
            echo "::error::'latest' tag pushed out of order.  remove 'latest' tag from operators_catalog and run again."
            exit 1
          else
            FIRST_CATALOG_RUN=false
            TAG_VERSION=$(echo $TAG_DATA | jq .tags | jq '.[0].name' -r)
          fi

          echo "OLD_CATALOG_VERSION=$(echo $TAG_VERSION)" >> $GITHUB_ENV
          echo "FIRST_CATALOG_RUN=$(echo $FIRST_CATALOG_RUN)" >> $GITHUB_ENV
        shell: bash
        env:
          TOKEN: ${{ secrets.QUAY_API_TOKEN }}
          ORGANIZATION: ${{ secrets.QUAY_ORGANIZATION }}

      - name: Confirm variables
        run: |
          echo "::notice::INCREMENT_DEVOPS_VERSION = $INCREMENT_DEVOPS_VERSION"
          echo "::notice::INCREMENT_CATALOG_VERSION = $INCREMENT_CATALOG_VERSION"
          echo "::notice::BRANCH = $BRANCH"
          echo "::notice::FIRST_RUN = $FIRST_RUN"
          echo "::notice::FIRST_CATALOG_RUN = $FIRST_CATALOG_RUN"
          echo "::notice::OLD_VERSION = $OLD_VERSION"
          echo "::notice::OLD_CATALOG_VERSION = $OLD_CATALOG_VERSION"
          echo "::notice::OVERRIDE_VERSION = $OVERRIDE_VERSION"

          if [ -z "$OLD_VERSION" ]; then
            echo "::error::Tag for $BRANCH not found.  Use the manual override to push an incremented version of this branch if"
            exit 1
          fi

          if [ -z "$OLD_CATALOG_VERSION" ]; then
            echo "::error::Catalog not found.  Check Quay API connection."
            exit 1
          fi
        shell: bash

      - name: Install Operator SDK
        run: |
          export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
          export OS=$(uname | awk '{print tolower($0)}')

          export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/v1.15.0
          curl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}

          gpg --keyserver keyserver.ubuntu.com --recv-keys 052996E2A20B5C7E

          curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt
          curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt.asc
          gpg -u "Operator SDK (release) <cncf-operator-sdk@cncf.io>" --verify checksums.txt.asc

          grep operator-sdk_${OS}_${ARCH} checksums.txt | sha256sum -c -

          chmod +x operator-sdk_${OS}_${ARCH} && sudo mv operator-sdk_${OS}_${ARCH} /usr/local/bin/operator-sdk

          rm checksums.txt
          rm checksums.txt.asc
        shell: bash

      - name: Install Openshift CLI Tools
        run: |
          echo $PATH
          curl https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz > openshift-client-linux.tar.gz
          curl https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest/opm-linux.tar.gz > opm-linux.tar.gz
          mkdir openshift
          tar -zxvf openshift-client-linux.tar.gz -C openshift
          tar -zxvf opm-linux.tar.gz -C openshift
          echo 'export PATH=$PATH:~/openshift' >> ~/.bashrc && source ~/.bashrc
          sudo mv ./openshift/opm /usr/local/bin/
          rm openshift-client-linux.tar.gz
          rm opm-linux.tar.gz
        shell: bash

      - name: Log current versions
        run: |
          echo "::notice::yq version"
          yq --version
          echo "::notice::docker version"
          docker --version
          echo "::notice::operator-sdk version"
          operator-sdk version
          echo "::notice::git version"
          git --version
          echo "::notice::opm version"
          opm version
          echo "::notice::helm version"
          helm version
        shell: bash

      - name: Helm Check
        run: |
          cd branch
          helm template devopsinabox-helm-chart --dry-run > /dev/null
          if [ $? -eq 0 ]; then
            echo "::notice::Helm template devopsinabox-helm-chart compiled successfully."
          else
            echo "::error::Helm template devopsinabox-helm-chart failed to compile."
            exit 1
          fi

          helm template devopsinabox-namespace-helm-chart --dry-run > /dev/null
          if [ $? -eq 0 ]; then
            echo "::notice::Helm template devopsinabox-namespace-helm-chart compiled successfully."
          else
            echo "::error::Helm template devopsinabox-namespace-helm-chart failed to compile."
            exit 1
          fi

          helm template spring-boot-app-helm-chart --dry-run > /dev/null
          if [ $? -eq 0 ]; then
            echo "::notice::Helm template spring-boot-app-helm-chart compiled successfully."
          else
            echo "::error::Helm template spring-boot-app-helm-chart failed to compile."
            exit 1
          fi

          helm template dotnet-app-helm-chart --dry-run > /dev/null
          if [ $? -eq 0 ]; then
            echo "::notice::Helm template dotnet-app-helm-chart compiled successfully."
          else
            echo "::error::Helm template dotnet-app-helm-chart failed to compile."
            exit 1
          fi
        shell: bash

      # Login
      - name: Login to Quay Registry
        run: |
          docker login -u $QUAY_USERNAME -p $QUAY_PASSWORD quay.io
        shell: bash
        env:
          QUAY_USERNAME: ${{ secrets.QUAY_ROBOT_USERNAME }}
          QUAY_PASSWORD: ${{ secrets.QUAY_ROBOT_PASSWORD }}

      - name: Generate operator files
        run: |
          cd branch
          mkdir devopsinabox
          cd devopsinabox
    
          operator-sdk init --plugins=helm --domain=com.perficient --group=apimc --version=v1alpha1 --kind=DevSecOpsManager --helm-chart=../devopsinabox-helm-chart
          operator-sdk create api --group=apimc --version=v1alpha1 --kind=ManagedNamespace --helm-chart=../devopsinabox-namespace-helm-chart
          operator-sdk create api --group=apimc --version=v1alpha1 --kind=SpringBootApp --helm-chart=../spring-boot-app-helm-chart
          operator-sdk create api --group=apimc --version=v1alpha1 --kind=DotNetApp --helm-chart=../dotnet-app-helm-chart

          rm -Rf ../devopsinabox-operator/helm-charts

          cp -R . ../devopsinabox-operator
          cd ../devopsinabox-operator
          
          cat << EOF >> config/default/kustomization.yaml
          patches:
          - path: manager-memory.yaml
          EOF

          cat <<EOF >> config/rbac/role.yaml
          - verbs:
            - "*"
            apiGroups:
            - "batch"
            resources:
            - "jobs"
          EOF

          if [[ $OVERRIDE_VERSION == false ]]; then
            export VERSION=$(../../main/tools/increment_version.sh $OLD_VERSION $INCREMENT_DEVOPS_VERSION)-$BRANCH
          else
            export VERSION=$OVERRIDE_VERSION-$BRANCH
          fi

          echo "::notice::VERSION = $VERSION"
          SPECIFIC_DATA=$(curl --location --request GET 'https://quay.io/api/v1/repository/'"$ORGANIZATION"'/devopsinabox-operator/tag?limit=100&onlyActiveTags=true&specificTag=v'"$VERSION"'' --header 'Authorization: Bearer $TOKEN')
          echo "::notice::SPECIFIC_DATA = $SPECIFIC_DATA"   
          SPECIFIC_ARRAY=$(echo $SPECIFIC_DATA | jq .tags)
          echo "::notice::SPECIFIC_ARRAY = $SPECIFIC_ARRAY"
          if [ "$SPECIFIC_ARRAY" != "[]" ]; then
            echo "::error::This version already exists.  Run manually and pick a version higher for this branch."
            exit 1
          fi

          export IMG=quay.io/$ORGANIZATION/devopsinabox-operator:v$VERSION
          export BUNDLE_IMG=quay.io/$ORGANIZATION/devopsinabox-operator-bundle:v$VERSION

          yq -i eval '.spec.version = "'$VERSION'"' config/manifests/bases/devopsinabox.clusterserviceversion.yaml
          yq -i eval '.metadata.annotations.containerImage = "'$IMG'"' config/manifests/bases/devopsinabox.clusterserviceversion.yaml
          DATE="$(date +'%Y-%m-%d %H:%M:%SZ')"
          yq -i eval '.metadata.annotations.createdAt = "'"$DATE"'"' config/manifests/bases/devopsinabox.clusterserviceversion.yaml
          NAME=devopsinabox.v$VERSION
          yq -i eval '.metadata.name = "'$NAME'"' config/manifests/bases/devopsinabox.clusterserviceversion.yaml
          
          if [[ $FIRST_RUN == false ]]; then
            REPLACES=devopsinabox.$OLD_VERSION
            yq -i eval '.spec.replaces = "'$REPLACES'"' config/manifests/bases/devopsinabox.clusterserviceversion.yaml
          else
            yq -i 'del(.spec.replaces)' config/manifests/bases/devopsinabox.clusterserviceversion.yaml
          fi

          make bundle CHANNELS=$BRANCH DEFAULT_CHANNEL=$BRANCH
          make docker-build docker-push
          make bundle-build
          docker push $BUNDLE_IMG

          export CATALOG_VERSION=$(../../main/tools/increment_version.sh $OLD_CATALOG_VERSION $INCREMENT_CATALOG_VERSION)
          export CATALOG_IMAGE_LATEST=quay.io/$ORGANIZATION/operators-catalog:latest
          export CATALOG_IMAGE_VERSION=quay.io/$ORGANIZATION/operators-catalog:v$CATALOG_VERSION

          if [[ $FIRST_CATALOG_RUN == false ]]; then
            opm index add --bundles $BUNDLE_IMG --from-index $CATALOG_IMAGE_LATEST --tag $CATALOG_IMAGE_VERSION --build-tool docker --pull-tool docker --debug
          else
            opm index add --bundles $BUNDLE_IMG --tag $CATALOG_IMAGE_VERSION --build-tool docker --pull-tool docker --debug
          fi

          docker tag $CATALOG_IMAGE_VERSION $CATALOG_IMAGE_LATEST
          docker push $CATALOG_IMAGE_LATEST
          docker push $CATALOG_IMAGE_VERSION
        shell: bash
        env:
          ORGANIZATION: ${{ secrets.QUAY_ORGANIZATION }}