name: DevOpsInABox

on:
#  push:
#    branches:
#    - aws
#    - azure
  workflow_dispatch:
    inputs:
      increment_devops_version:
        type: choice
        description: Version increment for devopsinabox
        required: true
        default: 'patch'
        options:
        - major
        - minor
        - patch
      increment_catalog_version:
        type: choice
        description: Version increment for catalog
        required: true
        default: 'patch'
        options:
        - major
        - minor
        - patch
      first_run:
        type: choice
        description: Set to true only if first run
        required: true
        default: 'false'
        options:
        - true
        - false

jobs:
  build_devopsinabox:

    name: Build and Deploy DevOpsInABox
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:

      - name: Set inputs
        run: |
          if [ ${GITHUB_REF#refs/heads/} != "aws" ] && [ ${GITHUB_REF#refs/heads/} != "azure" ]; then
            echo "::error::Branch must be 'aws' or 'azure'"
            exit 1
          else
            echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
          fi

          if [ -z "${{ inputs.increment_devops_version }}" ]; then
            echo "INCREMENT_DEVOPS_VERSION=patch" >> $GITHUB_ENV
          else
            echo "INCREMENT_DEVOPS_VERSION=$(echo ${{ inputs.increment_devops_version }})" >> $GITHUB_ENV
          fi

          if [ -z "${{ inputs.increment_catalog_version }}" ]; then
            echo "INCREMENT_CATALOG_VERSION=patch" >> $GITHUB_ENV
          else
            echo "INCREMENT_CATALOG_VERSION=$(echo ${{ inputs.increment_catalog_version }})" >> $GITHUB_ENV
          fi

          if [ -z "${{ inputs.first_run }}" ]; then
            echo "FIRST_RUN=false" >> $GITHUB_ENV
          else
            echo "FIRST_RUN=$(echo ${{ inputs.first_run }})" >> $GITHUB_ENV
          fi

          echo "ORGANIZATION=shawn_stout_org" >> $GITHUB_ENV
        shell: bash

      - name: Set versions
        run: |
          TAG_DATA=$(curl --location --request GET 'https://quay.io/api/v1/repository/'"$ORGANIZATION"'/devopsinabox-operator/tag?limit=100&onlyActiveTags=true' --header 'Authorization: Bearer $TOKEN')
          TAG_ARRAY=$(echo $TAG_DATA | jq .tags)
          echo $TAG_ARRAY
          if (( ${#TAG_ARRAY[@]} )); then
            echo "EMPTY!"
            TAG_VERSION="v0.0.0-$BRANCH"
            echo "OLD_VERSION=$(echo $TAG_VERSION)" >> $GITHUB_ENV
          else
            echo "NOT EMPTY!"
            echo "$TAG_ARRAY" | jq -r '.[].name' | while read -r TAG_NAME; do
              if [[ $TAG_NAME == *-$BRANCH ]]
              then
                echo "FOUND!"
                echo "OLD_VERSION=$(echo $TAG_NAME)" >> $GITHUB_ENV
                break
              fi
            done
          fi
          
        shell: bash
        env:
          TOKEN: ${{ secrets.QUAY_API_TOKEN }}

      - name: Log variables
        run: |
          echo "::notice::OLD_VERSION = $OLD_VERSION"

          if [ -z "$OLD_VERSION" ]
          then
            echo "::error::Tag for $BRANCH not found.  Run this manually."
            exit 1
          fi
        shell: bash